#N canvas 258 387 842 642 12;
#X obj 260 20 inlet;
#X obj 40 20 inlet;
#X obj 40 280 until;
#X obj 40 320 f;
#X obj 80 320 + 1;
#X msg 80 280 0;
#X obj 40 343 t f f;
#X obj 40 176 r \$0-reset;
#X obj 40 200 t b b;
#X obj 100 200 r \$0-range;
#X obj 140 160 loadbang;
#X obj 59 112 s \$0-range;
#X obj 40 43 t b f f;
#X obj 40 135 s \$0-reset;
#X obj 260 100 t b f;
#X obj 260 146 s \$0-reset;
#X obj 100 340 r \$0-range;
#X obj 80 80 array size \$1;
#X obj 40 240 20;
#X obj 40 380 / 20;
#X obj 40 560 array set \$1;
#X text 460 60 https://forum.pdpatchrepo.info/topic/12751/nrandom-generates-normally-distributed-random-numbers-vanilla
, f 34;
#X text 460 20 Sets the array given in \$1 as a Gaussian. Based on:
, f 33;
#X text 40 0 Number of points;
#X text 260 0 Variance (kinda);
#X obj 300 134 s \$0-variance;
#X obj 240 220 r \$0-variance;
#X obj 40 420 expr $f1 - 0.5;
#X obj 40 500 expr 1 / sqrt(2 * 3.14159 * $f3) * exp(-1 * pow($f1 \,
2) / (2 * $f3));
#X obj 260 60 clip 0 1;
#X text 301 342 The result of the above expression is the variance
s^2;
#X obj 200 240 0.5;
#X obj 240 320 expr 10 / pow(1 + 100 * (1 - $f1) / 20 \, 3.7);
#X connect 0 0 29 0;
#X connect 1 0 12 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 6 0;
#X connect 4 0 3 1;
#X connect 5 0 3 1;
#X connect 6 0 19 0;
#X connect 6 1 20 1;
#X connect 7 0 8 0;
#X connect 8 0 18 0;
#X connect 8 1 5 0;
#X connect 8 1 31 0;
#X connect 9 0 18 1;
#X connect 10 0 8 0;
#X connect 12 0 13 0;
#X connect 12 1 11 0;
#X connect 12 2 17 0;
#X connect 14 0 15 0;
#X connect 14 1 25 0;
#X connect 16 0 19 1;
#X connect 16 0 28 1;
#X connect 18 0 2 0;
#X connect 19 0 27 0;
#X connect 26 0 31 1;
#X connect 27 0 28 0;
#X connect 28 0 20 0;
#X connect 29 0 14 0;
#X connect 31 0 32 0;
#X connect 32 0 28 2;
