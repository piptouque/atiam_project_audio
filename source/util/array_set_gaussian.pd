#N canvas 68 322 842 642 12;
#X obj 260 20 inlet;
#X obj 40 20 inlet;
#X obj 40 250 until;
#X obj 40 273 f;
#X obj 70 273 + 1;
#X msg 82 250 0;
#X obj 40 296 t f f;
#X obj 40 180 r \$0-reset;
#X obj 40 204 t b b;
#X obj 86 204 r \$0-range;
#X obj 120 180 loadbang;
#X obj 59 112 s \$0-range;
#X obj 40 43 t b f f;
#X obj 40 135 s \$0-reset;
#X text 260 280 The result of the above expression is the variance
s^2;
#X obj 40 340 expr 1 / sqrt(2 * 3.14159 * $f2) * exp(-1 * pow($f1 *
4 - 2 \, 2) / (2 * $f2));
#X obj 199 258 expr 10 / pow(1 + $f1 / 20 \, 3.7);
#X obj 260 66 t b f;
#X obj 260 112 s \$0-reset;
#X obj 260 40 clip 0 100;
#X obj 86 296 r \$0-range;
#X obj 80 80 array size \$1;
#X obj 40 227 20;
#X obj 40 320 / 20;
#X obj 40 400 array set \$1;
#X text 460 60 https://forum.pdpatchrepo.info/topic/12751/nrandom-generates-normally-distributed-random-numbers-vanilla
, f 34;
#X text 460 20 Sets the array given in \$1 as a Gaussian. Based on:
, f 33;
#X obj 168 230 10;
#X obj 180 200 r \$0-inv-variance;
#X obj 300 100 s \$0-inv-variance;
#X text 260 0 Inverse of the variance (kinda);
#X text 40 0 Number of points;
#X connect 0 0 19 0;
#X connect 1 0 12 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 6 0;
#X connect 4 0 3 1;
#X connect 5 0 3 1;
#X connect 6 0 23 0;
#X connect 6 1 24 1;
#X connect 7 0 8 0;
#X connect 8 0 22 0;
#X connect 8 1 5 0;
#X connect 8 1 27 0;
#X connect 9 0 22 1;
#X connect 10 0 8 0;
#X connect 12 0 13 0;
#X connect 12 1 11 0;
#X connect 12 2 21 0;
#X connect 15 0 24 0;
#X connect 16 0 15 1;
#X connect 17 0 18 0;
#X connect 17 1 29 0;
#X connect 19 0 17 0;
#X connect 20 0 23 1;
#X connect 22 0 2 0;
#X connect 23 0 15 0;
#X connect 27 0 16 0;
#X connect 28 0 27 1;
